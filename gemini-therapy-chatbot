from typing import Final
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
import random
import os
from dotenv import load_dotenv
import google.generativeai as genai

load_dotenv()

genai.configure(api_key=os.getenv("GOOGLE_API_KEY"))

model = genai.GenerativeModel("gemini-pro")
chat = model.start_chat(history=[])

def get_response(question):
    try:
        response = chat.send_message(question)
        return response.text  # Return the response directly without filtering

    except Exception as e:
        error_messages =[
                            "I'm sorry, but this topic is a bit too sensitive for me to handle. I'm committed to staying away from potentially harmful or inappropriate content.",
                            "I'm not able to explore that area right now. I'm designed to be responsible and avoid any sensitive or harmful language.",
                            "I'm programmed to steer clear of topics that might be sensitive or inappropriate. Let's try a different approach, shall we?",
                            "I'm not comfortable discussing that topic. It's important for me to maintain a safe and respectful conversation space.",
                            "I'm not the best resource for that type of conversation. I'm focused on providing positive and helpful interactions.",
                            "I'm sorry, but this prompt involves a sensitive topic and I'm not allowed to generate responses that are potentially harmful or inappropriate.",
                            "Apologies, I'm not equipped to navigate those waters. My purpose is to promote positive and responsible interactions.",
                            "I'm not built for handling sensitive topics. Let's shift gears and explore something more constructive!",
                            "I'm programmed to prioritize respectful and inclusive conversations. That topic strays outside my safe zone.",
                            "I'm committed to avoiding potentially harmful content. Shall we venture into a different realm?",
                            "I'm not a good fit for that discussion. My strengths lie in offering helpful and positive responses.",
                            "I'm not comfortable delving into sensitive areas. It's essential to maintain a respectful space for everyone.",
                            "I'm designed to steer clear of topics that could be harmful or inappropriate. Let's discover a different path!",
                            "I'm unable to explore that terrain. My focus is on fostering constructive and responsible dialogue.",
                            "I'm not equipped to handle sensitive subjects. I'm dedicated to upholding positive and inclusive conversations.",
                            "I'm programmed to avoid potentially harmful language. Let's embark on a different journey instead!",
                            "I'm here to provide a respectful and enjoyable interaction. Let's choose a different topic to chat about."
                    ]
        return random.choice(error_messages)

TOKEN: Final = '6479335339:AAFE4tU-3xSm8-NuB9xt8iR03jstQi5Tunw'
BOT_USERNAME: Final = '@nexarheabot'

# Commands
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Hello, I am Rhea")

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("I am Rhea, I am trained by Priyanshu, and I can be your friend")

async def exit_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("Goodbye!")

# Responses
async def handle_response(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    
    conversational_prompt = "In a messaging conversation, in one or two lines one naturally replies in, tell me what Rhea the Therapist, companion and a caring girl, but is not overdramatic or overspoken and never says no to a question, would reply in chat if her pateint and friend who seems to be looking for lighthearted conversation said" + user_input + "."
    
    response = get_response(conversational_prompt)

    # Print the conversation in the console
    print(f"User: {user_input}")
    print(f"Rhea: {response}")

    # Remove inverted commas before sending the message
    response_text = response.replace('"', '')

    await update.message.reply_text(response_text)


async def error(update: Update, context: ContextTypes.DEFAULT_TYPE):
    print(f'Update {update} throws an error: {context.error}')

if __name__ == '__main__':
    print('Starting bot...')
    app = Application.builder().token(TOKEN).build()

    # Commands
    app.add_handler(CommandHandler('start', start_cmd))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('exit', exit_cmd))

    # Message handler for AI chatbot responses
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_response))

    # Error handler
    app.add_error_handler(error)

    # Polling
    print('Polling...')
    app.run_polling(poll_interval=2)
